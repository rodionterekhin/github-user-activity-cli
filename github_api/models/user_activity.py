# generated by datamodel-codegen:
#   filename:  user_activity.json
#   timestamp: 2025-03-01T13:40:24+00:00

from datetime import datetime
from enum import Enum

from pydantic import AnyUrl, BaseModel, Field, RootModel


class Actor(BaseModel):
    id: int
    login: str
    display_login: str | None = None
    gravatar_id: str | None
    url: AnyUrl
    avatar_url: AnyUrl


class Repo(BaseModel):
    id: int
    name: str
    url: AnyUrl


class Org(BaseModel):
    id: int
    login: str
    display_login: str | None = None
    gravatar_id: str | None
    url: AnyUrl
    avatar_url: AnyUrl


class StateReason(Enum):
    completed = "completed"
    reopened = "reopened"
    not_planned = "not_planned"
    NoneType_None = None


class User(BaseModel):
    name: str | None = None
    email: str | None = None
    login: str = Field(..., examples=["octocat"])
    id: int = Field(..., examples=[1])
    node_id: str = Field(..., examples=["MDQ6VXNlcjE="])
    avatar_url: AnyUrl = Field(
        ..., examples=["https://github.com/images/error/octocat_happy.gif"]
    )
    gravatar_id: str | None = Field(
        ..., examples=["41d064eb2195891e12d0413f63227ea7"]
    )
    url: AnyUrl = Field(..., examples=["https://api.github.com/users/octocat"])
    html_url: AnyUrl = Field(..., examples=["https://github.com/octocat"])
    followers_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/users/octocat/followers"]
    )
    following_url: str = Field(
        ...,
        examples=[
            "https://api.github.com/users/octocat/following{/other_user}"
        ],
    )
    gists_url: str = Field(
        ..., examples=["https://api.github.com/users/octocat/gists{/gist_id}"]
    )
    starred_url: str = Field(
        ...,
        examples=[
            "https://api.github.com/users/octocat/starred{/owner}{/repo}"
        ],
    )
    subscriptions_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/users/octocat/subscriptions"]
    )
    organizations_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/users/octocat/orgs"]
    )
    repos_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/users/octocat/repos"]
    )
    events_url: str = Field(
        ..., examples=["https://api.github.com/users/octocat/events{/privacy}"]
    )
    received_events_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/users/octocat/received_events"]
    )
    type: str = Field(..., examples=["User"])
    site_admin: bool
    starred_at: str | None = Field(None, examples=['"2020-07-09T00:17:55Z"'])
    user_view_type: str | None = Field(None, examples=["public"])


class Labels(BaseModel):
    id: int | None = None
    node_id: str | None = None
    url: AnyUrl | None = None
    name: str | None = None
    description: str | None = None
    color: str | None = None
    default: bool | None = None


class Assignee(BaseModel):
    name: str | None = None
    email: str | None = None
    login: str = Field(..., examples=["octocat"])
    id: int = Field(..., examples=[1])
    node_id: str = Field(..., examples=["MDQ6VXNlcjE="])
    avatar_url: AnyUrl = Field(
        ..., examples=["https://github.com/images/error/octocat_happy.gif"]
    )
    gravatar_id: str | None = Field(
        ..., examples=["41d064eb2195891e12d0413f63227ea7"]
    )
    url: AnyUrl = Field(..., examples=["https://api.github.com/users/octocat"])
    html_url: AnyUrl = Field(..., examples=["https://github.com/octocat"])
    followers_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/users/octocat/followers"]
    )
    following_url: str = Field(
        ...,
        examples=[
            "https://api.github.com/users/octocat/following{/other_user}"
        ],
    )
    gists_url: str = Field(
        ..., examples=["https://api.github.com/users/octocat/gists{/gist_id}"]
    )
    starred_url: str = Field(
        ...,
        examples=[
            "https://api.github.com/users/octocat/starred{/owner}{/repo}"
        ],
    )
    subscriptions_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/users/octocat/subscriptions"]
    )
    organizations_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/users/octocat/orgs"]
    )
    repos_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/users/octocat/repos"]
    )
    events_url: str = Field(
        ..., examples=["https://api.github.com/users/octocat/events{/privacy}"]
    )
    received_events_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/users/octocat/received_events"]
    )
    type: str = Field(..., examples=["User"])
    site_admin: bool
    starred_at: str | None = Field(None, examples=['"2020-07-09T00:17:55Z"'])
    user_view_type: str | None = Field(None, examples=["public"])


class State(Enum):
    open = "open"
    closed = "closed"


class Creator(BaseModel):
    name: str | None = None
    email: str | None = None
    login: str = Field(..., examples=["octocat"])
    id: int = Field(..., examples=[1])
    node_id: str = Field(..., examples=["MDQ6VXNlcjE="])
    avatar_url: AnyUrl = Field(
        ..., examples=["https://github.com/images/error/octocat_happy.gif"]
    )
    gravatar_id: str | None = Field(
        ..., examples=["41d064eb2195891e12d0413f63227ea7"]
    )
    url: AnyUrl = Field(..., examples=["https://api.github.com/users/octocat"])
    html_url: AnyUrl = Field(..., examples=["https://github.com/octocat"])
    followers_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/users/octocat/followers"]
    )
    following_url: str = Field(
        ...,
        examples=[
            "https://api.github.com/users/octocat/following{/other_user}"
        ],
    )
    gists_url: str = Field(
        ..., examples=["https://api.github.com/users/octocat/gists{/gist_id}"]
    )
    starred_url: str = Field(
        ...,
        examples=[
            "https://api.github.com/users/octocat/starred{/owner}{/repo}"
        ],
    )
    subscriptions_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/users/octocat/subscriptions"]
    )
    organizations_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/users/octocat/orgs"]
    )
    repos_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/users/octocat/repos"]
    )
    events_url: str = Field(
        ..., examples=["https://api.github.com/users/octocat/events{/privacy}"]
    )
    received_events_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/users/octocat/received_events"]
    )
    type: str = Field(..., examples=["User"])
    site_admin: bool
    starred_at: str | None = Field(None, examples=['"2020-07-09T00:17:55Z"'])
    user_view_type: str | None = Field(None, examples=["public"])


class Milestone(BaseModel):
    url: AnyUrl = Field(
        ...,
        examples=[
            "https://api.github.com/repos/octocat/Hello-World/milestones/1"
        ],
    )
    html_url: AnyUrl = Field(
        ...,
        examples=["https://github.com/octocat/Hello-World/milestones/v1.0"],
    )
    labels_url: AnyUrl = Field(
        ...,
        examples=[
            "https://api.github.com/repos/octocat/"
            "Hello-World/milestones/1/labels"
        ],
    )
    id: int = Field(..., examples=[1002604])
    node_id: str = Field(..., examples=["MDk6TWlsZXN0b25lMTAwMjYwNA=="])
    number: int = Field(
        ..., description="The number of the milestone.", examples=[42]
    )
    state: State = Field(
        ..., description="The state of the milestone.", examples=["open"]
    )
    title: str = Field(
        ..., description="The title of the milestone.", examples=["v1.0"]
    )
    description: str | None = Field(
        ..., examples=["Tracking milestone for version 1.0"]
    )
    creator: Creator | None
    open_issues: int = Field(..., examples=[4])
    closed_issues: int = Field(..., examples=[8])
    created_at: datetime = Field(..., examples=["2011-04-10T20:09:31Z"])
    updated_at: datetime = Field(..., examples=["2014-03-03T18:58:10Z"])
    closed_at: datetime | None = Field(..., examples=["2013-02-12T13:22:01Z"])
    due_on: datetime | None = Field(..., examples=["2012-10-09T23:39:01Z"])


class PullRequest(BaseModel):
    merged_at: datetime | None = None
    diff_url: AnyUrl | None
    html_url: AnyUrl | None
    patch_url: AnyUrl | None
    url: AnyUrl | None


class ClosedBy(BaseModel):
    name: str | None = None
    email: str | None = None
    login: str = Field(..., examples=["octocat"])
    id: int = Field(..., examples=[1])
    node_id: str = Field(..., examples=["MDQ6VXNlcjE="])
    avatar_url: AnyUrl = Field(
        ..., examples=["https://github.com/images/error/octocat_happy.gif"]
    )
    gravatar_id: str | None = Field(
        ..., examples=["41d064eb2195891e12d0413f63227ea7"]
    )
    url: AnyUrl = Field(..., examples=["https://api.github.com/users/octocat"])
    html_url: AnyUrl = Field(..., examples=["https://github.com/octocat"])
    followers_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/users/octocat/followers"]
    )
    following_url: str = Field(
        ...,
        examples=[
            "https://api.github.com/users/octocat/following{/other_user}"
        ],
    )
    gists_url: str = Field(
        ..., examples=["https://api.github.com/users/octocat/gists{/gist_id}"]
    )
    starred_url: str = Field(
        ...,
        examples=[
            "https://api.github.com/users/octocat/starred{/owner}{/repo}"
        ],
    )
    subscriptions_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/users/octocat/subscriptions"]
    )
    organizations_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/users/octocat/orgs"]
    )
    repos_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/users/octocat/repos"]
    )
    events_url: str = Field(
        ..., examples=["https://api.github.com/users/octocat/events{/privacy}"]
    )
    received_events_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/users/octocat/received_events"]
    )
    type: str = Field(..., examples=["User"])
    site_admin: bool
    starred_at: str | None = Field(None, examples=['"2020-07-09T00:17:55Z"'])
    user_view_type: str | None = Field(None, examples=["public"])


class License(BaseModel):
    key: str = Field(..., examples=["mit"])
    name: str = Field(..., examples=["MIT License"])
    url: AnyUrl | None = Field(
        ..., examples=["https://api.github.com/licenses/mit"]
    )
    spdx_id: str | None = Field(..., examples=["MIT"])
    node_id: str = Field(..., examples=["MDc6TGljZW5zZW1pdA=="])
    html_url: AnyUrl | None = None


class Permissions(BaseModel):
    admin: bool
    pull: bool
    triage: bool | None = None
    push: bool
    maintain: bool | None = None


class SquashMergeCommitTitle(Enum):
    PR_TITLE = "PR_TITLE"
    COMMIT_OR_PR_TITLE = "COMMIT_OR_PR_TITLE"


class SquashMergeCommitMessage(Enum):
    PR_BODY = "PR_BODY"
    COMMIT_MESSAGES = "COMMIT_MESSAGES"
    BLANK = "BLANK"


class MergeCommitTitle(Enum):
    PR_TITLE = "PR_TITLE"
    MERGE_MESSAGE = "MERGE_MESSAGE"


class MergeCommitMessage(Enum):
    PR_BODY = "PR_BODY"
    PR_TITLE = "PR_TITLE"
    BLANK = "BLANK"


class UserOwner(BaseModel):
    name: str | None = None
    email: str | None = None
    login: str = Field(..., examples=["octocat"])
    id: int = Field(..., examples=[1])
    node_id: str = Field(..., examples=["MDQ6VXNlcjE="])
    avatar_url: AnyUrl = Field(
        ..., examples=["https://github.com/images/error/octocat_happy.gif"]
    )
    gravatar_id: str | None = Field(
        ..., examples=["41d064eb2195891e12d0413f63227ea7"]
    )
    url: AnyUrl = Field(..., examples=["https://api.github.com/users/octocat"])
    html_url: AnyUrl = Field(..., examples=["https://github.com/octocat"])
    followers_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/users/octocat/followers"]
    )
    following_url: str = Field(
        ...,
        examples=[
            "https://api.github.com/users/octocat/following{/other_user}"
        ],
    )
    gists_url: str = Field(
        ..., examples=["https://api.github.com/users/octocat/gists{/gist_id}"]
    )
    starred_url: str = Field(
        ...,
        examples=[
            "https://api.github.com/users/octocat/starred{/owner}{/repo}"
        ],
    )
    subscriptions_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/users/octocat/subscriptions"]
    )
    organizations_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/users/octocat/orgs"]
    )
    repos_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/users/octocat/repos"]
    )
    events_url: str = Field(
        ..., examples=["https://api.github.com/users/octocat/events{/privacy}"]
    )
    received_events_url: AnyUrl = Field(
        ..., examples=["https://api.github.com/users/octocat/received_events"]
    )
    type: str = Field(..., examples=["User"])
    site_admin: bool
    starred_at: str | None = Field(None, examples=['"2020-07-09T00:17:55Z"'])
    user_view_type: str | None = Field(None, examples=["public"])


class BusinessOwner(BaseModel):
    description: str | None = Field(
        None, description="A short description of the enterprise."
    )
    html_url: AnyUrl = Field(
        ..., examples=["https://github.com/enterprises/octo-business"]
    )
    website_url: AnyUrl | None = Field(
        None, description="The enterprise's website URL."
    )
    id: int = Field(
        ..., description="Unique identifier of the enterprise", examples=[42]
    )
    node_id: str = Field(..., examples=["MDEwOlJlcG9zaXRvcnkxMjk2MjY5"])
    name: str = Field(
        ...,
        description="The name of the enterprise.",
        examples=["Octo Business"],
    )
    slug: str = Field(
        ...,
        description="The slug url identifier for the enterprise.",
        examples=["octo-business"],
    )
    created_at: datetime | None = Field(..., examples=["2019-01-26T19:01:12Z"])
    updated_at: datetime | None = Field(..., examples=["2019-01-26T19:14:43Z"])
    avatar_url: AnyUrl


class Repository(BaseModel):
    id: int = Field(
        ..., description="Unique identifier of the repository", examples=[42]
    )
    node_id: str = Field(..., examples=["MDEwOlJlcG9zaXRvcnkxMjk2MjY5"])
    name: str = Field(
        ...,
        description="The name of the repository.",
        examples=["Team Environment"],
    )
    full_name: str = Field(..., examples=["octocat/Hello-World"])
    license: License | None
    forks: int
    permissions: Permissions | None = None
    owner: UserOwner = Field(
        ..., description="A GitHub user.", title="Simple User"
    )
    private: bool = Field(
        ..., description="Whether the repository is private or public."
    )
    html_url: AnyUrl = Field(
        ..., examples=["https://github.com/octocat/Hello-World"]
    )
    description: str | None = Field(..., examples=["This your first repo!"])
    fork: bool
    url: AnyUrl = Field(
        ..., examples=["https://api.github.com/repos/octocat/Hello-World"]
    )
    archive_url: str = Field(
        ...,
        examples=[
            "http://api.github.com/repos/octocat/"
            "Hello-World/{archive_format}{/ref}"
        ],
    )
    assignees_url: str = Field(
        ...,
        examples=[
            "http://api.github.com/repos/octocat/Hello-World/assignees{/user}"
        ],
    )
    blobs_url: str = Field(
        ...,
        examples=[
            "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}"
        ],
    )
    branches_url: str = Field(
        ...,
        examples=[
            "http://api.github.com/repos/octocat/Hello-World/branches{/branch}"
        ],
    )
    collaborators_url: str = Field(
        ...,
        examples=[
            "http://api.github.com/repos/octocat/Hello-World/"
            "collaborators{/collaborator}"
        ],
    )
    comments_url: str = Field(
        ...,
        examples=[
            "http://api.github.com/repos/octocat/Hello-World/comments{/number}"
        ],
    )
    commits_url: str = Field(
        ...,
        examples=[
            "http://api.github.com/repos/octocat/Hello-World/commits{/sha}"
        ],
    )
    compare_url: str = Field(
        ...,
        examples=[
            "http://api.github.com/repos/octocat/Hello-World/"
            "compare/{base}...{head}"
        ],
    )
    contents_url: str = Field(
        ...,
        examples=[
            "http://api.github.com/repos/octocat/Hello-World/contents/{+path}"
        ],
    )
    contributors_url: AnyUrl = Field(
        ...,
        examples=[
            "http://api.github.com/repos/octocat/Hello-World/contributors"
        ],
    )
    deployments_url: AnyUrl = Field(
        ...,
        examples=[
            "http://api.github.com/repos/octocat/Hello-World/deployments"
        ],
    )
    downloads_url: AnyUrl = Field(
        ...,
        examples=["http://api.github.com/repos/octocat/Hello-World/downloads"],
    )
    events_url: AnyUrl = Field(
        ...,
        examples=["http://api.github.com/repos/octocat/Hello-World/events"],
    )
    forks_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/forks"]
    )
    git_commits_url: str = Field(
        ...,
        examples=[
            "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}"
        ],
    )
    git_refs_url: str = Field(
        ...,
        examples=[
            "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}"
        ],
    )
    git_tags_url: str = Field(
        ...,
        examples=[
            "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}"
        ],
    )
    git_url: str = Field(
        ..., examples=["git:github.com/octocat/Hello-World.git"]
    )
    issue_comment_url: str = Field(
        ...,
        examples=[
            "http://api.github.com/repos/octocat/Hello-World/issues/"
            "comments{/number}"
        ],
    )
    issue_events_url: str = Field(
        ...,
        examples=[
            "http://api.github.com/repos/octocat/Hello-World/issues/"
            "events{/number}"
        ],
    )
    issues_url: str = Field(
        ...,
        examples=[
            "http://api.github.com/repos/octocat/Hello-World/issues{/number}"
        ],
    )
    keys_url: str = Field(
        ...,
        examples=[
            "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}"
        ],
    )
    labels_url: str = Field(
        ...,
        examples=[
            "http://api.github.com/repos/octocat/Hello-World/labels{/name}"
        ],
    )
    languages_url: AnyUrl = Field(
        ...,
        examples=["http://api.github.com/repos/octocat/Hello-World/languages"],
    )
    merges_url: AnyUrl = Field(
        ...,
        examples=["http://api.github.com/repos/octocat/Hello-World/merges"],
    )
    milestones_url: str = Field(
        ...,
        examples=[
            "http://api.github.com/repos/octocat/Hello-World/"
            "milestones{/number}"
        ],
    )
    notifications_url: str = Field(
        ...,
        examples=[
            "http://api.github.com/repos/octocat/Hello-World/"
            "notifications{?since,all,participating}"
        ],
    )
    pulls_url: str = Field(
        ...,
        examples=[
            "http://api.github.com/repos/octocat/Hello-World/pulls{/number}"
        ],
    )
    releases_url: str = Field(
        ...,
        examples=[
            "http://api.github.com/repos/octocat/Hello-World/releases{/id}"
        ],
    )
    ssh_url: str = Field(
        ..., examples=["git@github.com:octocat/Hello-World.git"]
    )
    stargazers_url: AnyUrl = Field(
        ...,
        examples=[
            "http://api.github.com/repos/octocat/Hello-World/stargazers"
        ],
    )
    statuses_url: str = Field(
        ...,
        examples=[
            "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}"
        ],
    )
    subscribers_url: AnyUrl = Field(
        ...,
        examples=[
            "http://api.github.com/repos/octocat/Hello-World/subscribers"
        ],
    )
    subscription_url: AnyUrl = Field(
        ...,
        examples=[
            "http://api.github.com/repos/octocat/Hello-World/subscription"
        ],
    )
    tags_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/tags"]
    )
    teams_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/teams"]
    )
    trees_url: str = Field(
        ...,
        examples=[
            "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}"
        ],
    )
    clone_url: str = Field(
        ..., examples=["https://github.com/octocat/Hello-World.git"]
    )
    mirror_url: AnyUrl | None = Field(
        ..., examples=["git:git.example.com/octocat/Hello-World"]
    )
    hooks_url: AnyUrl = Field(
        ..., examples=["http://api.github.com/repos/octocat/Hello-World/hooks"]
    )
    svn_url: AnyUrl = Field(
        ..., examples=["https://svn.github.com/octocat/Hello-World"]
    )
    homepage: AnyUrl | None = Field(..., examples=["https://github.com"])
    language: str | None
    forks_count: int = Field(..., examples=[9])
    stargazers_count: int = Field(..., examples=[80])
    watchers_count: int = Field(..., examples=[80])
    size: int = Field(
        ...,
        description=(
            "The size of the repository, in kilobytes. Size is calculated"
            " hourly. When a repository is initially created, the size is 0."
        ),
        examples=[108],
    )
    default_branch: str = Field(
        ...,
        description="The default branch of the repository.",
        examples=["master"],
    )
    open_issues_count: int = Field(..., examples=[0])
    is_template: bool | None = Field(
        False,
        description=(
            "Whether this repository acts as a template that can be used to"
            " generate new repositories."
        ),
        examples=[True],
    )
    topics: list[str] | None = None
    has_issues: bool = Field(
        ..., description="Whether issues are enabled.", examples=[True]
    )
    has_projects: bool = Field(
        ..., description="Whether projects are enabled.", examples=[True]
    )
    has_wiki: bool = Field(
        ..., description="Whether the wiki is enabled.", examples=[True]
    )
    has_pages: bool
    has_downloads: bool = Field(
        ..., description="Whether downloads are enabled.", examples=[True]
    )
    has_discussions: bool | None = Field(
        False, description="Whether discussions are enabled.", examples=[True]
    )
    archived: bool = Field(
        ..., description="Whether the repository is archived."
    )
    disabled: bool = Field(
        ..., description="Returns whether or not this repository disabled."
    )
    visibility: str | None = Field(
        "public",
        description="The repository visibility: public, private, or internal.",
    )
    pushed_at: datetime | None = Field(..., examples=["2011-01-26T19:06:43Z"])
    created_at: datetime | None = Field(..., examples=["2011-01-26T19:01:12Z"])
    updated_at: datetime | None = Field(..., examples=["2011-01-26T19:14:43Z"])
    allow_rebase_merge: bool | None = Field(
        True,
        description="Whether to allow rebase merges for pull requests.",
        examples=[True],
    )
    temp_clone_token: str | None = None
    allow_squash_merge: bool | None = Field(
        True,
        description="Whether to allow squash merges for pull requests.",
        examples=[True],
    )
    allow_auto_merge: bool | None = Field(
        False,
        description="Whether to allow Auto-merge to be used on pull requests.",
        examples=[False],
    )
    delete_branch_on_merge: bool | None = Field(
        False,
        description=(
            "Whether to delete head branches when pull requests are merged"
        ),
        examples=[False],
    )
    allow_update_branch: bool | None = Field(
        False,
        description=(
            "Whether or not a pull request head branch that is behind its base"
            " branch can always be updated even if it is not required to be up"
            " to date before merging."
        ),
        examples=[False],
    )
    use_squash_pr_title_as_default: bool | None = Field(
        False,
        description=(
            "Whether a squash merge commit can use the pull request title as"
            " default. **This property is closing down. Please use"
            " `squash_merge_commit_title` instead."
        ),
    )
    squash_merge_commit_title: SquashMergeCommitTitle | None = Field(
        None,
        description=(
            "The default value for a squash merge commit title:\n\n-"
            " `PR_TITLE` - default to the pull request's title.\n-"
            " `COMMIT_OR_PR_TITLE` - default to the commit's title (if only"
            " one commit) or the pull request's title (when more than one"
            " commit)."
        ),
    )
    squash_merge_commit_message: SquashMergeCommitMessage | None = Field(
        None,
        description=(
            "The default value for a squash merge commit message:\n\n-"
            " `PR_BODY` - default to the pull request's body.\n-"
            " `COMMIT_MESSAGES` - default to the branch's commit messages.\n-"
            " `BLANK` - default to a blank commit message."
        ),
    )
    merge_commit_title: MergeCommitTitle | None = Field(
        None,
        description=(
            "The default value for a merge commit title.\n\n- `PR_TITLE` -"
            " default to the pull request's title.\n- `MERGE_MESSAGE` -"
            " default to the classic title for a merge message (e.g., Merge"
            " pull request #123 from branch-name)."
        ),
    )
    merge_commit_message: MergeCommitMessage | None = Field(
        None,
        description=(
            "The default value for a merge commit message.\n\n- `PR_TITLE` -"
            " default to the pull request's title.\n- `PR_BODY` - default to"
            " the pull request's body.\n- `BLANK` - default to a blank commit"
            " message."
        ),
    )
    allow_merge_commit: bool | None = Field(
        True,
        description="Whether to allow merge commits for pull requests.",
        examples=[True],
    )
    allow_forking: bool | None = Field(
        None, description="Whether to allow forking this repo"
    )
    web_commit_signoff_required: bool | None = Field(
        False,
        description=(
            "Whether to require contributors to sign off on web-based commits"
        ),
    )
    open_issues: int
    watchers: int
    master_branch: str | None = None
    starred_at: str | None = Field(None, examples=['"2020-07-09T00:17:42Z"'])
    anonymous_access_enabled: bool | None = Field(
        None,
        description=(
            "Whether anonymous git access is enabled for this repository"
        ),
    )


class Permissions1(BaseModel):
    issues: str | None = None
    checks: str | None = None
    metadata: str | None = None
    contents: str | None = None
    deployments: str | None = None


class PerformedViaGithubApp(BaseModel):
    id: int = Field(
        ..., description="Unique identifier of the GitHub app", examples=[37]
    )
    slug: str | None = Field(
        None,
        description="The slug name of the GitHub app",
        examples=["probot-owners"],
    )
    node_id: str = Field(..., examples=["MDExOkludGVncmF0aW9uMQ=="])
    client_id: str | None = Field(None, examples=['"Iv1.25b5d1e65ffc4022"'])
    owner: UserOwner | BusinessOwner
    name: str = Field(
        ...,
        description="The name of the GitHub app",
        examples=["Probot Owners"],
    )
    description: str | None = Field(
        ..., examples=["The description of the app."]
    )
    external_url: AnyUrl = Field(..., examples=["https://example.com"])
    html_url: AnyUrl = Field(
        ..., examples=["https://github.com/apps/super-ci"]
    )
    created_at: datetime = Field(..., examples=["2017-07-08T16:18:44-04:00"])
    updated_at: datetime = Field(..., examples=["2017-07-08T16:18:44-04:00"])
    permissions: Permissions1 = Field(
        ...,
        description="The set of permissions for the GitHub app",
        examples=[{"issues": "read", "deployments": "write"}],
    )
    events: list[str] = Field(
        ...,
        description="The list of events for the GitHub app",
        examples=["label", "deployment"],
    )
    installations_count: int | None = Field(
        None,
        description=(
            "The number of installations associated with the GitHub app"
        ),
        examples=[5],
    )
    client_secret: str | None = Field(
        None, examples=['"1d4b2097ac622ba702d19de498f005747a8b21d3"']
    )
    webhook_secret: str | None = Field(
        None, examples=['"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"']
    )
    pem: str | None = Field(None)


class AuthorAssociation(Enum):
    COLLABORATOR = "COLLABORATOR"
    CONTRIBUTOR = "CONTRIBUTOR"
    FIRST_TIMER = "FIRST_TIMER"
    FIRST_TIME_CONTRIBUTOR = "FIRST_TIME_CONTRIBUTOR"
    MANNEQUIN = "MANNEQUIN"
    MEMBER = "MEMBER"
    NONE = "NONE"
    OWNER = "OWNER"


class Reactions(BaseModel):
    url: AnyUrl
    total_count: int
    field_1: int = Field(..., alias="+1")
    field_1_1: int = Field(..., alias="-1")
    laugh: int
    confused: int
    heart: int
    hooray: int
    eyes: int
    rocket: int


class SubIssuesSummary(BaseModel):
    total: int
    completed: int
    percent_completed: int


class Issue(BaseModel):
    id: int
    node_id: str
    url: AnyUrl = Field(
        ...,
        description="URL for the issue",
        examples=["https://api.github.com/repositories/42/issues/1"],
    )
    repository_url: AnyUrl
    labels_url: str
    comments_url: AnyUrl
    events_url: AnyUrl
    html_url: AnyUrl
    number: int = Field(
        ...,
        description=(
            "Number uniquely identifying the issue within its repository"
        ),
        examples=[42],
    )
    state: str = Field(
        ...,
        description="State of the issue; either 'open' or 'closed'",
        examples=["open"],
    )
    state_reason: StateReason | None = Field(
        None,
        description="The reason for the current state",
        examples=["not_planned"],
    )
    title: str = Field(
        ...,
        description="Title of the issue",
        examples=["Widget creation fails in Safari on OS X 10.8"],
    )
    body: str | None = Field(
        None,
        description="Contents of the issue",
        examples=[
            "It looks like the new widget form is broken on Safari. When I try"
            " and create the widget, Safari crashes. This is reproducible on"
            " 10.8, but not 10.9. Maybe a browser bug?"
        ],
    )
    user: User | None
    labels: list[str | Labels] = Field(
        ...,
        description=(
            "Labels to associate with this issue; pass one or more label names"
            " to replace the set of labels on this issue; send an empty array"
            " to clear all labels from the issue; note that the labels are"
            " silently dropped for users without push access to the repository"
        ),
        examples=["bug", "registration"],
    )
    assignee: Assignee | None
    assignees: list[Assignee] | None = None
    milestone: Milestone | None
    locked: bool
    active_lock_reason: str | None = None
    comments: int
    pull_request: PullRequest | None = None
    closed_at: datetime | None
    created_at: datetime
    updated_at: datetime
    draft: bool | None = None
    closed_by: ClosedBy | None = None
    body_html: str | None = None
    body_text: str | None = None
    timeline_url: AnyUrl | None = None
    repository: Repository | None = Field(
        None, description="A repository on GitHub.", title="Repository"
    )
    performed_via_github_app: PerformedViaGithubApp | None = None
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        examples=["OWNER"],
        title="author_association",
    )
    reactions: Reactions | None = Field(None, title="Reaction Rollup")
    sub_issues_summary: SubIssuesSummary | None = Field(
        None, title="Sub-issues Summary"
    )


class PerformedViaGithubApp1(BaseModel):
    id: int = Field(
        ..., description="Unique identifier of the GitHub app", examples=[37]
    )
    slug: str | None = Field(
        None,
        description="The slug name of the GitHub app",
        examples=["probot-owners"],
    )
    node_id: str = Field(..., examples=["MDExOkludGVncmF0aW9uMQ=="])
    client_id: str | None = Field(None, examples=['"Iv1.25b5d1e65ffc4022"'])
    owner: UserOwner | BusinessOwner
    name: str = Field(
        ...,
        description="The name of the GitHub app",
        examples=["Probot Owners"],
    )
    description: str | None = Field(
        ..., examples=["The description of the app."]
    )
    external_url: AnyUrl = Field(..., examples=["https://example.com"])
    html_url: AnyUrl = Field(
        ..., examples=["https://github.com/apps/super-ci"]
    )
    created_at: datetime = Field(..., examples=["2017-07-08T16:18:44-04:00"])
    updated_at: datetime = Field(..., examples=["2017-07-08T16:18:44-04:00"])
    permissions: Permissions1 = Field(
        ...,
        description="The set of permissions for the GitHub app",
        examples=[{"issues": "read", "deployments": "write"}],
    )
    events: list[str] = Field(
        ...,
        description="The list of events for the GitHub app",
        examples=["label", "deployment"],
    )
    installations_count: int | None = Field(
        None,
        description=(
            "The number of installations associated with the GitHub app"
        ),
        examples=[5],
    )
    client_secret: str | None = Field(
        None, examples=['"1d4b2097ac622ba702d19de498f005747a8b21d3"']
    )
    webhook_secret: str | None = Field(
        None, examples=['"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b"']
    )
    pem: str | None = Field(None)


class Comment(BaseModel):
    id: int = Field(
        ...,
        description="Unique identifier of the issue comment",
        examples=[42],
    )
    node_id: str
    url: AnyUrl = Field(
        ...,
        examples=["https://api.github.com/repositories/42/issues/comments/1"],
    )
    body: str | None = Field(
        None,
        description="Contents of the issue comment",
        examples=[
            "What version of Safari were you using when you observed this bug?"
        ],
    )
    body_text: str | None = None
    body_html: str | None = None
    html_url: AnyUrl
    user: User | None
    created_at: datetime = Field(..., examples=["2011-04-14T16:00:49Z"])
    updated_at: datetime = Field(..., examples=["2011-04-14T16:00:49Z"])
    issue_url: AnyUrl
    author_association: AuthorAssociation = Field(
        ...,
        description="How the author is associated with the repository.",
        examples=["OWNER"],
        title="author_association",
    )
    performed_via_github_app: PerformedViaGithubApp1 | None = None
    reactions: Reactions | None = Field(None, title="Reaction Rollup")


class Page(BaseModel):
    page_name: str | None = None
    title: str | None = None
    summary: str | None = None
    action: str | None = None
    sha: str | None = None
    html_url: str | None = None


class Payload(BaseModel):
    action: str | None = None
    issue: Issue | None = Field(
        None,
        description=(
            "Issues are a great way to keep track of tasks, enhancements, and"
            " bugs for your projects."
        ),
        title="Issue",
    )
    comment: Comment | None = Field(
        None,
        description=(
            "Comments provide a way for people to collaborate on an issue."
        ),
        title="Issue Comment",
    )
    pages: list[Page] | None = None


class Event(BaseModel):
    id: str
    type: str | None
    actor: Actor = Field(..., description="Actor", title="Actor")
    repo: Repo
    org: Org | None = Field(None, description="Actor", title="Actor")
    payload: Payload
    public: bool
    created_at: datetime | None


class Events(RootModel):
    root: list[Event]
